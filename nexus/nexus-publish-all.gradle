apply plugin: 'maven'
apply plugin: 'signing'

def isReleaseBuild() {
    return VERSION_NAME.contains("SNAPSHOT") == false
}


def getReleaseRepositoryUrl() {
    return hasProperty('RELEASE_REPOSITORY_URL') ? RELEASE_REPOSITORY_URL : "http://xxxx:port/nexus/content/repositories/android-releases/"
}

def getSnapshotRepositoryUrl() {
    return hasProperty('SNAPSHOT_REPOSITORY_URL') ? SNAPSHOT_REPOSITORY_URL : "http://xxxx:port/nexus/content/repositories/android-snapshots/"
}

def getRepositoryUsername() {
    return hasProperty('NEXUS_USERNAME') ? NEXUS_USERNAME : ""
}
def getRepositoryPassword() {
    return hasProperty('NEXUS_PASSWORD') ? NEXUS_PASSWORD : ""
}

signing {
    required { isReleaseBuild() && gradle.taskGraph.hasTask("uploadArchives")}
    sign configurations.archives
}

afterEvaluate { project ->
    uploadArchives {
        repositories {
            mavenDeployer {
                pom.groupId = GROUP
                pom.artifactId = POM_ARTIFACT_ID
                pom.version = VERSION_NAME
                repository(url: getReleaseRepositoryUrl()) {
                    authentication(userName: getRepositoryUsername(), password: getRepositoryPassword())
                }
                snapshotRepository(url: getSnapshotRepositoryUrl()) {
                    authentication(userName: getRepositoryUsername(), password: getRepositoryPassword())
                }
            }
        }
    }
    task androidJavadocs(type: Javadoc) {
        source = android.sourceSets.main.java.srcDirs
        classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
        options {
            encoding "UTF-8"
            links "http://docs.oracle.com/javase/7/docs/api/"
            linksOffline "http://d.android.com/reference", "${android.sdkDirectory}/docs/reference"
        }
        exclude '**/BuildConfig.java'
        exclude '**/R.java'
    }
    task androidJavadocsJar(type: Jar, dependsOn: androidJavadocs) {
        classifier = 'javadoc'
        from androidJavadocs.destinationDir
    }
    task androidSourcesJar(type: Jar) {
        classifier = 'sources'
        from android.sourceSets.main.java.sourceFiles
    }
    task androidrReleaseJar(type: Copy) {
        from( 'build/intermediates/bundles/release/')
        exclude 'build/intermediates/bundles/release/aapt'
        into( 'build/libs')
        include('classes.jar')
        rename('classes.jar', "${project.name}-release.jar")
    }
    task androidReleaseLib(type: Zip, dependsOn: androidrReleaseJar) {
        classifier = 'jarLib'
        from "${project.buildDir}/libs/${project.name}-release.jar"
    }
    artifacts {
        archives androidReleaseLib
        archives androidSourcesJar
        archives androidJavadocsJar
        "${project.buildDir}/outputs/aar/${project.name}-release.aar"
    }

}