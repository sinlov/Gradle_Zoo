apply plugin: 'com.android.application'

android {
    lintOptions{
        checkReleaseBuilds false
        abortOnError false
    }
}

def Comm_Name = readComm_Name()
def OBA_Output = readOBA_Output()

def readComm_Name() {
    return hasProperty('COMM_NAME') ? COMM_NAME : "Def"
}

def readOBA_Output() {
    return hasProperty('OBA_OUT_DIR') ? OBA_OUT_DIR : "build/outApk"
}

task outTAD(type: Copy, dependsOn: build) {
    def outCatchDir = new File(OBA_Output)
    if (outCatchDir.exists()) {
        outCatchDir.deleteDir()
    }
    from('build/outputs/apk/')
    exclude "build/outputs/apk/${project.name}-debug-unsigned.apk"
    into(OBA_Output)
    include("${project.name}-debug.apk")
    rename("${project.name}-debug.apk", Comm_Name + "-${android.defaultConfig.applicationId}-debug-${android.defaultConfig.versionName}-" + readTimeStr() + ".apk")
}

task outTAR(type: Copy, dependsOn: build) {
    def outCatchDir = new File(OBA_Output)
    if (outCatchDir.exists()) {
        outCatchDir.deleteDir()
    }
    from('build/outputs/apk/')
    exclude "build/outputs/apk/${project.name}-debug.apk"
    exclude "build/outputs/apk/${project.name}-debug-unsigned.apk"
    into(OBA_Output)
    include("${project.name}-release-unsigned.apk")
    rename("${project.name}-release-unsigned.apk", Comm_Name + "-${android.defaultConfig.applicationId}-release_unsigned-${android.defaultConfig.versionName}-" + readTimeStr() + ".apk")
}

task outTADARMv7a(type: Copy, dependsOn: build) {
    def outCatchDir = new File(OBA_Output)
    if (outCatchDir.exists()) {
        outCatchDir.deleteDir()
    }
    from('build/outputs/apk/')
    exclude "build/outputs/apk/${project.name}-armeabi-v7a-debug-unsigned.apk"
    into(OBA_Output)
    include("${project.name}-armeabi-v7a-debug.apk")
    rename("${project.name}-armeabi-v7a-debug.apk", Comm_Name + "-${android.defaultConfig.applicationId}-armeabi-v7a-debug-${android.defaultConfig.versionName}-" + readTimeStr() + ".apk")
}

task outTARARMv7a(type: Copy, dependsOn: build) {
    def outCatchDir = new File(OBA_Output)
    if (outCatchDir.exists()) {
        outCatchDir.deleteDir()
    }
    from('build/outputs/apk/')
    exclude "build/outputs/apk/${project.name}-debug.apk"
    exclude "build/outputs/apk/${project.name}-debug-unsigned.apk"
    exclude "build/outputs/apk/${project.name}-armeabi-debug.apk"
    exclude "build/outputs/apk/${project.name}-armeabi-debug-unsigned.apk"
    exclude "build/outputs/apk/${project.name}-mips-debug.apk"
    exclude "build/outputs/apk/${project.name}-mips-debug-unsigned.apk"
    exclude "build/outputs/apk/${project.name}-x86-debug.apk"
    exclude "build/outputs/apk/${project.name}-x86-debug-unsigned.apk"
    exclude "build/outputs/apk/${project.name}-armeabi-v7a-debug.apk"
    exclude "build/outputs/apk/${project.name}-armeabi-v7a-debug-unsigned.apk"
    into(OBA_Output)
    include("${project.name}-armeabi-v7a-release-unsigned.apk")
    rename("${project.name}-armeabi-v7a-release-unsigned.apk", Comm_Name + "-${android.defaultConfig.applicationId}-armeabi-v7a-release_unsigned-${android.defaultConfig.versionName}-" + readTimeStr() + ".apk")
}

task outProductFlavorsReleaseUnsigned(type: Copy, dependsOn: build) {
    def outCatchDir = new File(OBA_Output)
    if (outCatchDir.exists()) {
        outCatchDir.deleteDir()
    }
    android.productFlavors.all { flavor ->
        println "productFlavors ${flavor.name}"
        from('build/outputs/apk/')
        exclude "build/outputs/apk/${project.name}-${flavor.name}.apk"
        exclude "build/outputs/apk/${project.name}-${flavor.name}-unsigned.apk"
        into(OBA_Output)
        include("${project.name}-${flavor.name}-release-unsigned.apk")
        rename("${project.name}-${flavor.name}-release-unsigned.apk", Comm_Name + "-${android.defaultConfig.applicationId}-${flavor.name}-unsigned-${android.defaultConfig.versionName}-" + readTimeStr() + ".apk")
    }
}

task outProductFlavorsReleaseAll(type: Copy, dependsOn: build) {
    def outCatchDir = new File(OBA_Output)
    if (outCatchDir.exists()) {
        outCatchDir.deleteDir()
    }
    android.productFlavors.all { flavor ->
        println "productFlavors ${flavor.name}"
        from('build/outputs/apk/')
        exclude "build/outputs/apk/${project.name}-${flavor.name}.apk"
        exclude "build/outputs/apk/${project.name}-${flavor.name}-unsigned.apk"
        into(OBA_Output)
        include("${project.name}-${flavor.name}-release.apk")
        rename("${project.name}-${flavor.name}-release.apk", Comm_Name + "-${android.defaultConfig.applicationId}-${flavor.name}-${android.defaultConfig.versionName}-" + readTimeStr() + ".apk")
        include("${project.name}-${flavor.name}-release-unsigned.apk")
        rename("${project.name}-${flavor.name}-release-unsigned.apk", Comm_Name + "-${android.defaultConfig.applicationId}-${flavor.name}-unsigned-${android.defaultConfig.versionName}-" + readTimeStr() + ".apk")
    }
}

def readTimeStr() {
    return new Date().format('yyyy_MM_dd_HH_mm');
}