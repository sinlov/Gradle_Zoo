apply plugin: 'maven'
apply plugin: 'signing'

def isReleaseBuild() {
    return VERSION_NAME.contains("SNAPSHOT") == false
}

def gitHubReleaseRepositoryDir() {
    return hasProperty('GITHUB_RELEASE_REPOSITORY_DIR') ? GITHUB_RELEASE_REPOSITORY_DIR : "file://${project.rootDir}/mvn-repo"
}

def gitHubSnapshotRepositoryDir() {
    return hasProperty('GITHUB_SNAPSHOT_REPOSITORY_DIR') ? GITHUB_SNAPSHOT_REPOSITORY_DIR : "file://${project.rootDir}/mvn-repo/snapshots/"
}

afterEvaluate { project ->
    uploadArchives {
        repositories {
            mavenDeployer {
                beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

                pom.groupId = GROUP
                pom.artifactId = POM_ARTIFACT_ID
                pom.version = VERSION_NAME

                repository(url: gitHubReleaseRepositoryDir()) {
                }
                snapshotRepository(url: gitHubSnapshotRepositoryDir()) {
                }

                pom.project {
                    name POM_NAME
                    packaging POM_PACKAGING
                    description POM_DESCRIPTION
                    url POM_URL

                    scm {
                        url POM_SCM_URL
                        connection POM_SCM_CONNECTION
                        developerConnection POM_SCM_DEV_CONNECTION
                    }

                    licenses {
                        license {
                            name POM_LICENCE_NAME
                            url POM_LICENCE_URL
                            distribution POM_LICENCE_DIST
                        }
                    }

                    developers {
                        developer {
                            id POM_DEVELOPER_ID
                            name POM_DEVELOPER_NAME
                        }
                    }
                }
            }
        }
    }

    signing {
        required { isReleaseBuild() && gradle.taskGraph.hasTask("uploadArchives") }
        sign configurations.archives
    }

    task androidJavadocs(type: Javadoc) {
        source = android.sourceSets.main.java.srcDirs
        classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
        options.encoding = "UTF-8"
        options.charSet  = "UTF-8"
        exclude '**/BuildConfig.java'
        exclude '**/R.java'
    }

    task androidJavadocsJar(type: Jar, dependsOn: androidJavadocs) {
        classifier = 'javadoc'
        from androidJavadocs.destinationDir
    }

    task androidSourcesJar(type: Jar) {
        classifier = 'sources'
        from android.sourceSets.main.java.sourceFiles
    }

    task androidrReleaseJar(type: Copy) {
        from( 'build/intermediates/bundles/release/')
        exclude 'build/intermediates/bundles/release/aapt'
        into( 'build/libs')
        include('classes.jar')
        rename('classes.jar', "${project.name}-release.jar")
    }
    task androidReleaseLib(type: Zip, dependsOn: androidrReleaseJar) {
        classifier = 'jarLib'
        from "${project.buildDir}/libs/${project.name}-release.jar"
    }

    artifacts {
        archives androidReleaseLib
        archives androidSourcesJar
        archives androidJavadocsJar
    }
}